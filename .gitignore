# Temporary and binary files
*~
*.py[cod]
*.so
*.cfg
!.isort.cfg
!setup.cfg
*.orig
*.log
*.pot
__pycache__/*
.cache/*
.*.swp
*/.ipynb_checkpoints/*
*.xml

# Project files
.ropeproject
.project
.pydevproject
.settings
.idea
.vscode
tags

# Package files
*.egg
*.eggs/
.installed.cfg
*.egg-info

# Unittest and coverage
htmlcov/*
.coverage
.tox
.nox
junit.xml
coverage.xml
.pytest_cache/
*.zip

# Build and docs folder/files
build/*
dist/*
sdist/*
docs/api/*
docs/_rst/*
docs/_build/*
cover/*

# Per-project virtualenvs
.venv*/
.env


# Mac OS-specific storage files
.DS_Store

# secret
.secret

postgres-data


src/*/.yarn/*
!src/*/.yarn/patches
!src/*/.yarn/plugins
!src/*/.yarn/releases
!src/*/.yarn/sdks
!src/*/.yarn/versions
src/**/node_modules
*.idea
.coverage.*
.env.*
!example.env
temp
.hypothesis

src/system-view/node_modules/*

dynamodb-data

# Local .terraform directories
**/.terraform/*

# .tfstate files
*.tfstate
*.tfstate.*

# Crash log files
crash.log

# Ignore any .tfvars files that are generated automatically for each Terraform run. Most
# .tfvars files are managed as part of configuration and so should be included in
# version control.
#
# example.tfvars

# Ignore override files as they are usually used to override resources locally and so
# are not checked in
override.tf
override.tf.json
*_override.tf
*_override.tf.json

# Include override files you do wish to add to version control using negated pattern
#
# !example_override.tf

# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan
# example: *tfplan*
